//! Implementing the sumcheck protocol of the virtual polynomial
//! This sum check is heavily copied fron the implemenation done by Ezpressolabs

use ark_ff::PrimeField;
use fiat_shamir::FiatShamirTranscript;
use polynomial::{multilinear::Multilinear, virtual_polynomial::VirtualPolynomial};
use std::{fmt::Debug, marker::PhantomData};
pub mod prover;
pub mod verifier;

/// Trait for doing sum check protocols.
pub trait SumCheck<F: PrimeField> {
    type VirtualPolynomial;
    type VPAuxInfo;
    type MultilinearExtension;

    type SumCheckProof: Clone + Debug + Default + PartialEq;
    type Transcript;
    type SumCheckSubClaim: Clone + Debug + Default + PartialEq;

    /// Extract sum from the proof
    fn extract_sum(proof: &Self::SumCheckProof) -> F;

    /// Initialize the system with a transcript
    ///
    /// This function is optional -- in the case where a SumCheck is
    /// an building block for a more complex protocol, the transcript
    /// may be initialized by this complex protocol, and passed to the
    /// SumCheck prover/verifier.
    fn init_transcript() -> Self::Transcript;

    /// Generate proof of the sum of polynomial over {0,1}^`num_vars`
    ///
    /// The polynomial is represented in the form of a VirtualPolynomial.
    fn prove(
        poly: &Self::VirtualPolynomial,
        transcript: &mut Self::Transcript,
    ) -> Result<Self::SumCheckProof, anyhow::Error>;

    /// Verify the claimed sum using the proof
    fn verify(
        sum: F,
        proof: &Self::SumCheckProof,
        aux_info: &Self::VPAuxInfo,
        transcript: &mut Self::Transcript,
    ) -> Result<Self::SumCheckSubClaim, anyhow::Error>;
}

/// Trait for sum check protocol prover side APIs.
pub trait SumCheckProver<F: PrimeField>
where
    Self: Sized,
{
    type VirtualPolynomial;
    type ProverMessage;

    /// Initialize the prover state to argue for the sum of the input polynomial
    /// over {0,1}^`num_vars`.
    fn prover_init(polynomial: &Self::VirtualPolynomial) -> Result<Self, anyhow::Error>;

    /// Receive message from verifier, generate prover message, and proceed to
    /// next round.
    ///
    /// Main algorithm used is from section 3.2 of [XZZPS19](https://eprint.iacr.org/2019/317.pdf#subsection.3.2).
    fn prove_round_and_update_state(
        &mut self,
        challenge: &Option<F>,
    ) -> Result<Self::ProverMessage, anyhow::Error>;
}

/// Trait for sum check protocol verifier side APIs.
pub trait SumCheckVerifier<F: PrimeField> {
    type VPAuxInfo;
    type ProverMessage;
    type Challenge;
    type Transcript;
    type SumCheckSubClaim;

    /// Initialize the verifier's state.
    fn verifier_init(index_info: &Self::VPAuxInfo) -> Self;

    /// Run verifier for the current round, given a prover message.
    ///
    /// Note that `verify_round_and_update_state` only samples and stores
    /// challenges; and update the verifier's state accordingly. The actual
    /// verifications are deferred (in batch) to `check_and_generate_subclaim`
    /// at the last step.
    fn verify_round_and_update_state(
        &mut self,
        prover_msg: &Self::ProverMessage,
        transcript: &mut Self::Transcript,
    ) -> Result<Self::Challenge, anyhow::Error>;

    /// This function verifies the deferred checks in the interactive version of
    /// the protocol; and generate the subclaim. Returns an error if the
    /// proof failed to verify.
    ///
    /// If the asserted sum is correct, then the multilinear polynomial
    /// evaluated at `subclaim.point` will be `subclaim.expected_evaluation`.
    /// Otherwise, it is highly unlikely that those two will be equal.
    /// Larger field size guarantees smaller soundness error.
    fn check_and_generate_subclaim(
        &self,
        asserted_sum: &F,
    ) -> Result<Self::SumCheckSubClaim, anyhow::Error>;
}

/// A SumCheckSubClaim is a claim generated by the verifier at the end of
/// verification when it is convinced.
#[derive(Clone, Debug, Default, PartialEq, Eq)]
pub struct SumCheckSubClaim<F: PrimeField> {
    /// the multi-dimensional point that this multilinear extension is evaluated
    /// to
    pub point: Vec<F>,
    /// the expected evaluation
    pub expected_evaluation: F,
}

#[derive(Clone, Debug, Default, PartialEq, Eq)]
pub struct SumCheckProverMessage<F: PrimeField> {
    pub(crate) evaluations: Vec<F>,
}

#[derive(Clone, Debug, Default, PartialEq, Eq)]
pub struct SumCheckProof<F: PrimeField> {
    pub point: Vec<F>,
    pub proofs: Vec<SumCheckProverMessage<F>>,
}

pub fn vp_aux_info_to_bytes(index_info: (usize, usize)) -> Vec<u8> {
    let mut bytes = Vec::new();
    bytes.extend_from_slice(&index_info.0.to_le_bytes());
    bytes.extend_from_slice(&index_info.1.to_le_bytes());
    bytes
}

/// This is the API entry point for the Virtual Polynomial Sum Check protocol.
/// It provides a high-level interface for constructing and verifying proofs.
pub struct VirtualPolySumCheck<F: PrimeField> {
    _marker: PhantomData<F>,
}

impl<F: PrimeField> SumCheck<F> for VirtualPolySumCheck<F> {
    type VirtualPolynomial = VirtualPolynomial<F>;
    type VPAuxInfo = (usize, usize);
    type MultilinearExtension = Multilinear<F>;
    type SumCheckProof = SumCheckProof<F>;
    type Transcript = FiatShamirTranscript;
    type SumCheckSubClaim = SumCheckSubClaim<F>;

    fn extract_sum(proof: &Self::SumCheckProof) -> F {
        todo!()
    }

    fn init_transcript() -> Self::Transcript {
        todo!()
    }

    fn prove(
        poly: &Self::VirtualPolynomial,
        transcript: &mut Self::Transcript,
    ) -> Result<Self::SumCheckProof, anyhow::Error> {
        todo!()
    }

    fn verify(
        sum: F,
        proof: &Self::SumCheckProof,
        aux_info: &Self::VPAuxInfo,
        transcript: &mut Self::Transcript,
    ) -> Result<Self::SumCheckSubClaim, anyhow::Error> {
        todo!()
    }
}
